// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TicTacToe.Infrastructure.Data;

#nullable disable

namespace TicTacToe.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250717121950_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("tictactoe")
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TicTacToe.Domain.Entities.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("NextSymbol")
                        .HasColumnType("integer")
                        .HasColumnName("next_symbol");

                    b.Property<int>("Size")
                        .HasColumnType("integer")
                        .HasColumnName("size");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.Property<int>("WinLength")
                        .HasColumnType("integer")
                        .HasColumnName("win_length");

                    b.Property<int?>("Winner")
                        .HasColumnType("integer")
                        .HasColumnName("winner");

                    b.HasKey("Id")
                        .HasName("pk_games");

                    b.ToTable("games", "tictactoe");
                });

            modelBuilder.Entity("TicTacToe.Domain.Entities.Move", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("GameId")
                        .HasColumnType("integer")
                        .HasColumnName("game_id");

                    b.Property<bool>("IsFlipped")
                        .HasColumnType("boolean")
                        .HasColumnName("is_flipped");

                    b.Property<int>("MoveNumber")
                        .HasColumnType("integer")
                        .HasColumnName("move_number");

                    b.Property<int>("Player")
                        .HasColumnType("integer")
                        .HasColumnName("player");

                    b.Property<int>("PlayerMove")
                        .HasColumnType("integer")
                        .HasColumnName("player_move");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("pk_moves");

                    b.HasIndex("GameId")
                        .HasDatabaseName("ix_moves_game_id");

                    b.ToTable("moves", "tictactoe");
                });

            modelBuilder.Entity("TicTacToe.Domain.Entities.Move", b =>
                {
                    b.HasOne("TicTacToe.Domain.Entities.Game", null)
                        .WithMany("Moves")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_moves_games_game_id");

                    b.OwnsOne("TicTacToe.Domain.ValueObjects.Position", "Position", b1 =>
                        {
                            b1.Property<int>("MoveId")
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            b1.Property<int>("Column")
                                .HasColumnType("integer")
                                .HasColumnName("Column");

                            b1.Property<int>("Row")
                                .HasColumnType("integer")
                                .HasColumnName("Row");

                            b1.HasKey("MoveId");

                            b1.ToTable("moves", "tictactoe");

                            b1.WithOwner()
                                .HasForeignKey("MoveId")
                                .HasConstraintName("fk_moves_moves_id");
                        });

                    b.Navigation("Position")
                        .IsRequired();
                });

            modelBuilder.Entity("TicTacToe.Domain.Entities.Game", b =>
                {
                    b.Navigation("Moves");
                });
#pragma warning restore 612, 618
        }
    }
}
